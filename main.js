!function(){var t={240:function(){}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,{a:e}),e},i.d=function(t,e){for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},function(){"use strict";var t=i(240),e=i.n(t);const n={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error"},s={profileEditForm:document.forms["profile-form"],addCardForm:document.forms["card-form"],profileEditButton:document.querySelector("#profile-edit-button"),addCardButton:document.querySelector("#profile-add-button"),profileEditPopup:document.querySelector("#profile-edit-popup"),addCardPopup:document.querySelector("#add-card-popup"),picturePopup:document.querySelector("#picture-popup"),profileTitle:document.querySelector(".profile__title"),profileDescription:document.querySelector(".profile__description"),profileTitleInput:document.querySelector("#profile-title-input"),profileDescriptionInput:document.querySelector("#profile-description-input"),cardListEl:document.querySelector(".cards__list"),addCardTitleInput:document.querySelector("#add-card-title"),addCardUrlInput:document.querySelector("#add-card-url")};class r{constructor(t,e,i){let{name:n,link:s,_id:r,likes:o}=t;this._name=n,this._link=s,this._id=r,this._likes=o,this._cardSelector=e,this._handleImageClick=i}_createCardElement(){const t=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return this._cardElement=t,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._likeCountEl=this._cardElement.querySelector(".card__like-count"),this._cardTitleEl.textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._setLikeState(),this._cardElement}_setLikeState(){this._likes.some((t=>"your-user-id"===t._id))?(this._likeButton.classList.add("card__like-button_active"),this._isLiked=!0):(this._likeButton.classList.remove("card__like-button_active"),this._isLiked=!1),this._likeCountEl.textContent=this._likes.length}_toggleLike(){this._isLiked?api.dislikeCard(this._id).then((t=>{this._likes=t.likes,this._setLikeState()})).catch((t=>console.error(`Error unliking card: ${t}`))):api.likeCard(this._id).then((t=>{this._likes=t.likes,this._setLikeState()})).catch((t=>console.error(`Error liking card: ${t}`)))}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._toggleLike()})),this._trashButton.addEventListener("click",(()=>handleDeleteCard(this._cardElement,this._id))),this._cardImageEl.addEventListener("click",(()=>this._handleImageClick(this._link,this._name)))}getView(){return this._createCardElement(),this._setEventListeners(),this._cardElement}}class o{constructor(t,e){this._settings=t,this._formElement=e,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_checkInputValidity(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.validity.valid?(t.classList.remove(this._settings.inputErrorClass),e.textContent=""):(t.classList.add(this._settings.inputErrorClass),e.textContent=t.validationMessage)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}resetValidation(){this._inputList.forEach((t=>{const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.remove(this._settings.inputErrorClass),e.textContent=""})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class l{constructor(t){this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".popup__close").addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(t=>{t.target===this._popupElement&&this.close()}))}}class c extends l{constructor(t,e){super(t),this._handleFormSubmit=e,this._formElement=this._popupElement.querySelector(".popup__form"),this._inputList=Array.from(this._formElement.querySelectorAll(".popup__input"))}_getInputValues(){const t={};return this._inputList.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._formElement.reset()}))}}const a=new(e())({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2844dc79-6340-476e-8bf6-ea55311716d1","Content-Type":"application/json"}}),{profileEditForm:d,addCardForm:u,profileEditButton:p,addCardButton:_,profileTitleInput:h,profileDescriptionInput:m}=s,E=new class{constructor(t){let{nameSelector:e,descriptionSelector:i}=t;this._nameElement=document.querySelector(e),this._descriptionElement=document.querySelector(i)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(t){let{name:e,description:i}=t;this._nameElement.textContent=e,this._descriptionElement.textContent=i}}({nameSelector:".profile__title",descriptionSelector:".profile__description"});function f(t){return new r(t,"#card-template",S).getView()}const v=new class{constructor(t,e){let{items:i,renderer:n}=t;this._items=i,this._renderer=n,this._container=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}({renderer:t=>{const e=f(t);v.addItem(e)}},".cards__list");function S(t,e){y.open({name:e,link:t})}a.getUserInfo().then((t=>{E.setUserInfo({name:t.name,description:t.about})})).catch((t=>console.error("Error fetching user info:",t))),a.getInitialCards().then((t=>{t.forEach((t=>{const e=f(t);v.addItem(e)}))})).catch((t=>console.error("Error fetching cards:",t)));const k=new c("#profile-edit-popup",(t=>{a.updateUserInfo(t).then((t=>{E.setUserInfo({name:t.name,description:t.about}),k.close()})).catch((t=>console.error("Error updating profile:",t)))}));k.setEventListeners();const g=new c("#add-card-popup",(t=>{a.addCard(t).then((t=>{const e=f(t);v.addItem(e),g.close()})).catch((t=>console.error("Error adding card:",t)))}));g.setEventListeners();const y=new class extends l{constructor(t){super(t),this._imageElement=this._popupElement.querySelector(".popup__image"),this._captionElement=this._popupElement.querySelector(".popup__caption")}open(t){let{name:e,link:i}=t;this._imageElement.src=i,this._imageElement.alt=e,this._captionElement.textContent=e,super.open()}}("#picture-popup");y.setEventListeners();const L=new o(n,d),C=new o(n,u);L.enableValidation(),C.enableValidation(),p.addEventListener("click",(function(){const t=E.getUserInfo();h.value=t.name,m.value=t.description,L.resetValidation(),k.open()})),_.addEventListener("click",(()=>{g.open()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
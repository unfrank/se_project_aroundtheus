!function(){"use strict";const e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error"},t={profileEditForm:document.forms["profile-form"],addCardForm:document.forms["card-form"],avatarEditForm:document.querySelector("#edit-avatar-form"),profileEditButton:document.querySelector("#profile-edit-button"),addCardButton:document.querySelector("#profile-add-button"),profileTitle:document.querySelector(".profile__title"),profileDescription:document.querySelector(".profile__description"),profileTitleInput:document.querySelector("#profile-title-input"),profileDescriptionInput:document.querySelector("#profile-description-input"),cardListEl:document.querySelector(".cards__list"),addCardTitleInput:document.querySelector("#add-card-title"),addCardUrlInput:document.querySelector("#add-card-url")};class r{constructor(e,t,r,s,i,n){let{name:o,link:a,_id:l,isLiked:d,likes:c=[],owner:h}=e;this._name=o,this._link=a,this._id=l,this._isLiked=d,this._likes=c,this._owner=h,this._currentUserId=s,this._cardSelector=t,this._handleImageClick=r,this._api=i,this._handleDeleteCard=n}setLikeState(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}toggleLike(){this._isLiked?this._api.dislikeCard(this._id).then((e=>{this._isLiked=e.isLiked,this.setLikeState()})).catch((e=>console.error(`Error unliking card: ${e}`))):this._api.likeCard(this._id).then((e=>{this._isLiked=e.isLiked,this.setLikeState()})).catch((e=>console.error(`Error liking card: ${e}`)))}setEventListeners(){this._likeButton.addEventListener("click",(()=>{this.toggleLike()})),this._owner===this._currentUserId&&this._trashButton.addEventListener("click",(()=>this._handleDeleteCard(this._cardElement,this._id))),this._cardImageEl.addEventListener("click",(()=>this._handleImageClick(this._link,this._name)))}getView(){return this.createCardElement(),this.setEventListeners(),this._cardElement}createCardElement(){const e=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return this._cardElement=e,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardTitleEl.textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this.setLikeState(),this._cardElement}}class s{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_checkInputValidity(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.validity.valid?(e.classList.remove(this._settings.inputErrorClass),t.textContent=""):(e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent=""})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class i{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".popup__close").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target===this._popupElement&&this.close()}))}}class n extends i{constructor(e,t){super(e),this.handleFormSubmit=t,this.formElement=this._popupElement.querySelector(".popup__form")||null,this.formElement&&(this._submitBtn=this.formElement.querySelector(".popup__button"),this._submitBtnText=this._submitBtn.textContent),this.formElement&&(this.inputList=Array.from(this.formElement.querySelectorAll(".popup__input")))}__getInputValues(){const e={};return this.formElement&&this.inputList.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn.textContent=e?t:this._submitBtnText}setEventListeners(){super.setEventListeners(),this.formElement&&this.formElement.addEventListener("submit",(e=>{e.preventDefault(),this.handleFormSubmit(this.__getInputValues())}))}resetForm(){this.formElement&&this.formElement.reset()}}const o=new class{constructor(e){let{baseUrl:t,headers:r}=e;this.baseUrl=t,this.headers=r}_request(e,t){return fetch(e,t).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_handleError(e){return console.error(e),Promise.reject(e)}getInitialCards(){return this._request(`${this.baseUrl}/cards`,{headers:this.headers}).catch(this._handleError)}getUserInfo(){return this._request(`${this.baseUrl}/users/me`,{headers:this.headers}).catch(this._handleError)}updateUserInfo(e){let{name:t,about:r}=e;return this._request(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:r})}).catch(this._handleError)}addCard(e){let{name:t,link:r}=e;return this._request(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:r})}).catch(this._handleError)}deleteCard(e){return this._request(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).catch(this._handleError)}likeCard(e){return this._request(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).catch(this._handleError)}dislikeCard(e){return this._request(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).catch(this._handleError)}updateAvatar(e){return this._request(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).catch(this._handleError)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"765a56ab-1403-4444-8fac-5fc1871e9695","Content-Type":"application/json"}}),{addCardForm:a,addCardButton:l,avatarEditForm:d,profileEditForm:c,profileEditButton:h,profileTitleInput:u,profileDescriptionInput:_}=t,m=document.querySelector("#edit-avatar-button"),p=new class{constructor(e){let{nameSelector:t,descriptionSelector:r,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,description:r,avatar:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=r,this._avatarElement.src=s}}({nameSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"}),E=new class extends i{constructor(e){super(e),this.confirmButton=this._popupElement.querySelector(".popup__button_confirm-delete"),this.handleConfirm=null}setConfirmHandler(e){this.handleConfirm=e,this.confirmButton.removeEventListener("click",this._boundHandleConfirm),this._boundHandleConfirm=()=>{this.handleConfirm()},this.confirmButton.addEventListener("click",this._boundHandleConfirm,{once:!0})}setEventListeners(){super.setEventListeners()}}("#delete-card-popup");E.setEventListeners();const f=(e,t)=>{E.setConfirmHandler((()=>{o.deleteCard(t).then((()=>{e.remove(),E.close()})).catch((e=>console.error(`Error deleting card: ${e}`)))})),E.open()},v=e=>new r({name:e.name,link:e.link,_id:e._id,owner:e.owner,isLiked:e.isLiked},"#card-template",g,k,o,f).getView(),L=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const t=v(e);L.addItem(t)}},".cards__list");let k;o.getUserInfo().then((e=>(p.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),k=e._id,o.getInitialCards()))).then((e=>{L.renderItems(e.reverse())})).catch((e=>console.error("Error fetching user info or cards:",e)));const g=(e,t)=>{y.open({name:t,link:e})},b=new n("#profile-edit-popup",(e=>{b.renderLoading(!0),o.updateUserInfo({name:e.name,about:e.description}).then((e=>{p.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),b.close(),b.resetForm()})).catch((e=>{console.error("Error updating profile:",e)})).finally((()=>{b.renderLoading(!1)}))}));b.setEventListeners();const S=new n("#add-card-popup",(e=>{S.renderLoading(!0),o.addCard({name:e.title,link:e.url}).then((e=>{const t=v({name:e.name,link:e.link,_id:e._id,owner:e.owner,likes:e.likes});L.addItem(t),S.close(),S.resetForm(),I.disableButton()})).catch((e=>{console.error("Error adding card:",e)})).finally((()=>{S.renderLoading(!1)}))}));S.setEventListeners();const C=new n("#avatar-edit-popup",(e=>{C.renderLoading(!0),o.updateAvatar(e.avatar).then((e=>{p.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),C.close(),d.reset()})).catch((e=>console.error("Error updating avatar:",e))).finally((()=>{C.renderLoading(!1)}))}));C.setEventListeners(),m.addEventListener("click",(()=>{B.resetValidation(),C.open()}));const y=new class extends i{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".popup__image"),this._captionElement=this._popupElement.querySelector(".popup__caption")}open(e){let{name:t,link:r}=e;this._imageElement.src=r,this._imageElement.alt=t,this._captionElement.textContent=t,super.open()}}("#picture-popup");y.setEventListeners();const q=new s(e,c),I=new s(e,a),B=new s(e,d);q.enableValidation(),I.enableValidation(),B.enableValidation(),h.addEventListener("click",(()=>{const e=p.getUserInfo();u.value=e.name,_.value=e.description,q.resetValidation(),b.open()})),l.addEventListener("click",(()=>{S.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
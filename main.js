!function(){"use strict";const e={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error"},t={profileEditForm:document.forms["profile-form"],addCardForm:document.forms["card-form"],profileEditButton:document.querySelector("#profile-edit-button"),addCardButton:document.querySelector("#profile-add-button"),profileEditPopup:document.querySelector("#profile-edit-popup"),addCardPopup:document.querySelector("#add-card-popup"),picturePopup:document.querySelector("#picture-popup"),profileTitle:document.querySelector(".profile__title"),profileDescription:document.querySelector(".profile__description"),profileTitleInput:document.querySelector("#profile-title-input"),profileDescriptionInput:document.querySelector("#profile-description-input"),cardListEl:document.querySelector(".cards__list"),addCardTitleInput:document.querySelector("#add-card-title"),addCardUrlInput:document.querySelector("#add-card-url")};class r{constructor(e,t,r,s,i,n){let{name:o,link:a,_id:l,isLiked:c,likes:d=[],owner:h}=e;this._name=o,this._link=a,this._id=l,this._isLiked=c,this._likes=d,this._owner=h,this._currentUserId=s,this._cardSelector=t,this._handleImageClick=r,this._api=i,this._handleDeleteCard=n}_createCardElement(){const e=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);return this._cardElement=e,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._likeCountEl=this._cardElement.querySelector(".card__like-count"),this._cardTitleEl.textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._setLikeState(),this._cardElement}_setLikeState(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_toggleLike(){this._isLiked?this._api.dislikeCard(this._id).then((e=>{this._isLiked=!1,this._likes=e.likes||[],this._setLikeState()})).catch((e=>console.error(`Error unliking card: ${e}`))):this._api.likeCard(this._id).then((e=>{this._isLiked=!0,this._likes=e.likes||[],this._setLikeState()})).catch((e=>console.error(`Error liking card: ${e}`)))}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._toggleLike()})),this._owner===this._currentUserId&&this._trashButton.addEventListener("click",(()=>this._handleDeleteCard(this._cardElement,this._id))),this._cardImageEl.addEventListener("click",(()=>this._handleImageClick(this._link,this._name)))}getView(){return this._createCardElement(),this._setEventListeners(),this._cardElement}}class s{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_checkInputValidity(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.validity.valid?(e.classList.remove(this._settings.inputErrorClass),t.textContent=""):(e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}resetValidation(){this._inputList.forEach((e=>{const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent=""})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}}class i{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".popup__close").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target===this._popupElement&&this.close()}))}}class n extends i{constructor(e,t){super(e),this._handleFormSubmit=t,this._formElement=this._popupElement.querySelector(".popup__form"),this._inputList=Array.from(this._formElement.querySelectorAll(".popup__input"))}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._formElement.reset()}))}}const o=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_handleError(e){return console.error(e),Promise.reject(e)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>(console.error("API error:",e),Promise.reject(e))))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse).catch(this._handleError)}updateUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then(this._checkResponse).catch(this._handleError)}addCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then(this._checkResponse).catch(this._handleError)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).catch(this._handleError)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse).catch(this._handleError)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).catch(this._handleError)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse).catch(this._handleError)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"765a56ab-1403-4444-8fac-5fc1871e9695","Content-Type":"application/json"}}),{profileEditForm:a,addCardForm:l,profileEditButton:c,addCardButton:d,profileTitleInput:h,profileDescriptionInput:u}=t,_=document.querySelector("#profile-edit-popup .popup__button"),p=document.querySelector("#add-card-popup .popup__button"),m=document.querySelector("#avatar-edit-popup .popup__button"),E=document.querySelector("#edit-avatar-button"),v=new class{constructor(e){let{nameSelector:t,descriptionSelector:r,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,description:r,avatar:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=r,s&&(this._avatarElement.src=s)}}({nameSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"}),k=(e,t)=>{const r=document.querySelector("#delete-card-popup"),s=document.querySelector("#confirm-delete-button"),i=()=>{o.deleteCard(t).then((()=>{e.remove(),r.classList.remove("popup_opened")})).catch((e=>console.error(`Error deleting card: ${e}`)))};s.addEventListener("click",i,{once:!0}),r.classList.add("popup_opened"),r.querySelector(".popup__close").addEventListener("click",(()=>{r.classList.remove("popup_opened"),s.removeEventListener("click",i)}))},f=e=>new r(e,"#card-template",L,y,o,k).getView(),S=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const t=f(e);S.addItem(t)}},".cards__list");let y;o.getUserInfo().then((e=>(v.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),y=e._id,o.getInitialCards()))).then((e=>{e.forEach((e=>{const t=f({name:e.name,link:e.link,_id:e._id,owner:e.owner,likes:e.likes});S.addItem(t)}))})).catch((e=>console.error("Error fetching user info or cards:",e)));const L=(e,t)=>{q.open({name:t,link:e})},g=new n("#profile-edit-popup",(e=>{_.textContent="Saving...",o.updateUserInfo({name:e.name,about:e.description}).then((e=>{v.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),g.close()})).catch((e=>{console.error("Error updating profile:",e)})).finally((()=>{_.textContent="Save"}))}));g.setEventListeners();const C=new n("#add-card-popup",(e=>{p.textContent="Saving...",o.addCard({name:e.title,link:e.url}).then((e=>{const t=f({name:e.name,link:e.link,_id:e._id,owner:e.owner,likes:e.likes});S.addItem(t),C._formElement.reset(),C.close(),p.textContent="Save"})).catch((e=>console.error("Error adding card:",e)))}));C.setEventListeners();const b=new n("#avatar-edit-popup",(e=>{m.textContent="Saving...",o.updateAvatar(e.avatar).then((e=>{document.querySelector(".profile__image").src=e.avatar,b.close()})).catch((e=>console.error("Error updating avatar:",e))).finally((()=>{m.textContent="Save"}))}));b.setEventListeners(),E.addEventListener("click",(()=>{b.open()}));const q=new class extends i{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".popup__image"),this._captionElement=this._popupElement.querySelector(".popup__caption")}open(e){let{name:t,link:r}=e;this._imageElement.src=r,this._imageElement.alt=t,this._captionElement.textContent=t,super.open()}}("#picture-popup");q.setEventListeners();const I=new s(e,a),B=new s(e,l);I.enableValidation(),B.enableValidation(),c.addEventListener("click",(()=>{const e=v.getUserInfo();h.value=e.name,u.value=e.description,I.resetValidation(),g.open()})),d.addEventListener("click",(()=>{C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,